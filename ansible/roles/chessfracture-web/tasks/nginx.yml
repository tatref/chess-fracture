---

#- name: create /var/www/.well-known/acme-challenge
#  file:
#    path: /var/www/.well-known/acme-challenge
#    state: directory
#    mode: 0755

- name: create /var/www/media
  file:
    path: /var/www/media
    state: directory
    mode: 0755
    owner: root
    group: root
  changed_when: false

- name: copy media to /var/www/media
  synchronize:
    src: media/
    dest: /var/www/media
    delete: yes
  changed_when: false

- name: restorecon -Rv /var/www
  command: restorecon -Rv /var/www
  changed_when: false

- name: selinux bool httpd_can_network_connect
  seboolean:
    name: httpd_can_network_connect
    state: yes
    persistent: yes

- name: install nginx and chrony
  yum:
    name: "{{ item }}"
    state: installed
  loop:
    - nginx
    - chrony

- name: start chronyd
  service:
    name: chronyd
    state: started
    enabled: true

- name: open nginx ports
  firewalld:
    port: "{{item}}/tcp"
    permanent: true
    immediate: true
    state: enabled
  loop:
    - 80
    - 443

- name: configure nginx.conf
  template:
    src: etc/nginx/nginx.conf
    dest: /etc/nginx/nginx.conf
  notify: restart nginx

- name: configure nginx webapp.conf
  template:
    src: "etc/nginx/conf.d/{{item}}.conf"
    dest: "/etc/nginx/conf.d/{{item}}.conf"
  notify: restart nginx
  loop:
    - default
    - certbot

- name: start nginx
  service:
    name: nginx
    state: started
    enabled: true

- name: "create /root/.aws/"
  file:
    path: "/root/.aws"
    state: directory
    mode: "u+rwx"
    owner: "root"
    group: "root"

- name: copy aws credentials
  copy:
    src: ../../aws
    dest: "/root/.aws/config"
    owner: "root"
    group: "root"
    mode: 0600

- name: get certificate
  #shell: certbot certonly -n --webroot -w /var/www -d chessfracture.net -m {{ letsencrypt_mail }} --agree-tos --staging
  shell: "{{django_venv_path}}/bin/certbot certonly --dns-route53 -n -d chessfracture.net --agree-tos --email {{ letsencrypt_mail }} --staging"
  args:
    creates: /etc/letsencrypt/live/chessfracture.net/fullchain.pem
  when: dev is defined and firstcert is defined
  become_user: root

- name: get certificate
  #shell: certbot certonly -n --webroot -w /var/www -d chessfracture.net -m {{ letsencrypt_mail }} --agree-tos
  shell: "{{django_venv_path}}/bin/certbot certonly --dns-route53 -n -d chessfracture.net --agree-tos --email {{ letsencrypt_mail }}"
  args:
    creates: /etc/letsencrypt/live/chessfracture.net/fullchain.pem
  when: not dev is defined and firstcert is defined
  become_user: root

- name: certbot crontab
  cron:
    cron_file: certbot
    #job: certbot certonly -n --webroot -w /var/www -d chessfracture.net -m {{ letsencrypt_mail }} --agree-tos --staging --force-renewal
    job: "{{django_venv_path}}/bin/certbot certonly -n --dns-route53 -d chessfracture.net --agree-tos --email {{ letsencrypt_mail }} --force-renewal --staging"
    special_time: weekly
    user: root
    name: certbot update certificate
  when: dev is defined

- name: certbot crontab
  cron:
    cron_file: certbot
    #job: certbot certonly -n --webroot -w /var/www -d chessfracture.net -m {{ letsencrypt_mail }} --agree-tos --force-renewal
    job: "{{django_venv_path}}/bin/certbot certonly -n --dns-route53 -d chessfracture.net --agree-tos --email {{ letsencrypt_mail }} --force-renewal"
    special_time: weekly
    user: root
    name: certbot update certificate
  when: not dev is defined

- name: nginx service
  service:
    name: nginx
    state: started
    enabled: true

- name: configure nginx webapp.conf
  template:
    src: "etc/nginx/conf.d/{{item}}.conf"
    dest: "/etc/nginx/conf.d/{{item}}.conf"
  notify: restart nginx
  loop:
    - default_ssl
    - django
    - stub_status
